<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Junior 2 Senior</title>
    <link>https://jr2sr.netlify.com/</link>
    <description>Recent content on Junior 2 Senior</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Apr 2020 23:19:06 +0200</lastBuildDate>
    
        <atom:link href="https://jr2sr.netlify.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DNS</title>
      <link>https://jr2sr.netlify.com/posts/dns/</link>
      <pubDate>Sun, 07 Jun 2020 18:25:44 +0200</pubDate>
      
      <guid>https://jr2sr.netlify.com/posts/dns/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the first article, we describe what is a web/HTTP request. Requests are directed toward a host and a port.
The port is defined by the protocol, HTTP goes to port 80, HTTPS goes to 443. The host is defined by the request as a string.
A possible host is &#34;google.com&#34; or &#34;facebook.com&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, packets are routed over the internet using IP addresses, numbers, while hosts are strings.
Each IP packet contains its source and its destination. The router reads the IP address of the destination and forwards the packets toward the best route to reach the destination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;DNS serves have the basic goal of translating the string that represents the host (&#34;google.com&#34;) in a number, the IP address (116.98.109.34).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_scratching_the_surface&#34;&gt;Scratching the surface&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At its most basic level, DNS are services that take as input a host string and return the IP address of the host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;$ dig +noall +answer -t A google.com
google.com.		275	IN	A	216.58.205.46
$ dig +noall +answer -t AAAA google.com
google.com.		257	IN	AAAA	2a00:1450:4009:81b::200e&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the first line we translate the host &#34;google.com&#34; into an IPv4 address (&lt;code&gt;216.58.205.46&lt;/code&gt;).
In the second line, for the same host, we retrieve its IPv6 (&lt;code&gt;2a00:1450:4009:81b::200e&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_dns_record_type&#34;&gt;DNS record type&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;DNS can store different kinds of records beside IP addresses. The most common record type is &lt;code&gt;A&lt;/code&gt; that stores IPv4 addresses. The &lt;code&gt;AAAA&lt;/code&gt; record stores IPv6 addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another important record type is the &lt;code&gt;CNAME&lt;/code&gt; (or ALIAS) record type. It is useful if a single machine, with only one IP address, runs multiple services on different ports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;TXT&lt;/code&gt; record type can contain arbitrary information, it is usually used to verify the ownership of a domain name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Other record types are available and widely used, but the working principle is the same for all.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_resolve_dns_query&#34;&gt;Resolve DNS query&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;DNS works like any other internet service, but with some peculiarity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First of all, the IP address of the DNSs are widely know, for instance, the one provided by google is 8.8.8.8 and the one by Cloudflare is 1.1.1.1&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then DNS works mostly over UDP and not over TCP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The use of UDP is mostly for performance. Performance is the most strict requirement for DNS. DNS must be fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;DNS queries fit into a single UDP packet, as well as DNS answers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_need_for_speed&#34;&gt;Need for speed&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The use of UDP over TCP is mostly due to performance requirements. Any application needs to make multiple DNS queries, they must be fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Even if fast, it is still impractical to make a DNS query for each network request. Moreover, when visiting a website, most requests are against the same host in a short amount of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To address the problem DNS is aggressively cached on different layers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Caching is not sufficient, eventually, the value stores in the DNS record change and the DNS must be updated. For this reason, DNS records provide also a TTL value, Time To Live.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After the TTL expires, the DNS value is considered outdated and it must be requested again from the authoritative domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_server_cache&#34;&gt;Server cache&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The first level of DNS cache is the server level. DNS servers don&amp;#8217;t store all the values of all the domains, but only a small subset.
If a request for an unknown domain comes, they recursively redirect the request to other DNS until they don&amp;#8217;t get the answer from the authoritative (main) DNS.
The answer is then cached until the TTL expires.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_client_cache&#34;&gt;Client cache&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While server cached helps a lot in reducing the latency of DNS queries, it cannot be as fast as a local copy.
Hence the first level of cache regarding the name server happens in the local machine.
The OS intercepts DNS requests and returns a cached answer, as long as the TTL is not expired.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ttl_and_propagation_time&#34;&gt;TTL and propagation time&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Caching the result of DNS queries has the huge benefits of making it fast. The downside is that updates to DNS take time. All the TTL needs to expire before we can see the updated values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For this reason, and for their capabilities to store arbitrary values, DNS servers are considered the biggest and more used eventual consistent databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It can take up to 2 days for the information to propagate in the DNS servers. For most applications, the delay is much smaller, a few hours at the very maximum in my experience using AWS Route53 or Cloudfront.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_dns_console&#34;&gt;DNS console&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After you buy a domain name you can set all the DNS values relative to that domain and all its subdomains.
All the DNS interfaces are similar, offering pretty much the same functionality.
Your DNS provider is mostly a matter of taste and convenience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_aws_route53&#34;&gt;AWS Route53&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I like to use Amazon Route53 service, that allows buying the domain and set the records in the same interface.
I like Amazon Route53 because:
DNS is a fundamental service for AWS, it will always work
They provide very clear, simple, and cheap pricing
 I trust Amazon don&amp;#8217;t screw people over a few dollars in the domain registration fee, unlike other vendors.
A domain on AWS cost ~12$ / year plus few cents if your domain is extremely popular or if you need special features.
Beware that other vendors sell your domain at a much higher price BUT they provide a hefty discount for the first year. So it seems like you are buying it for 4$ and the second year they start charging you 50$ / year.
In my opinion, it is just not worth doing business with them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_trivial&#34;&gt;Trivial&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The DNS service of Amazon is called Route53, while Route is quite clear, why not Route 66, much more iconic. Or Route 101? Because 53 is the port used by the DNS protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_the_console&#34;&gt;The console&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The console of AWS Route53 looks like this, for each of your domains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/aws_console_base.png&#34; alt=&#34;AWS Route53 Base console&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will focus on the big table. The navigation on the right is for more (advanced) features of AWS Route53.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From the table, we can immediately see the name of the record (first column), the record type (&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;NS&lt;/code&gt;, &lt;code&gt;AAAA&lt;/code&gt;, &lt;code&gt;CNAME&lt;/code&gt;, etc&amp;#8230;&amp;#8203;) and the value of the record.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/aws_console_zoom.png&#34; alt=&#34;AWS Route53 Base console zoomed in&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The highlighted rows are all &lt;code&gt;A&lt;/code&gt; records. It is interesting to note how the root domain manage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;The root domain itself, making &lt;code&gt;redbeardlab.com&lt;/code&gt; point to the IP address &lt;code&gt;212.47.232.249&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sub-domain, making &lt;code&gt;simplesql.redbeardlab.com&lt;/code&gt; point to &lt;code&gt;212.47.253.152&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All other sub-domain levels, in this case making &lt;code&gt;telemetrics.redisql.redbeardlab.com&lt;/code&gt; point to &lt;code&gt;51.15.142.13&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/aws_console_A_records.png&#34; alt=&#34;AWS Route53 Base console A records&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;AAAA&lt;/code&gt; records are very similar to the &lt;code&gt;A&lt;/code&gt; record.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/aws_console_AAAA_record.png&#34; alt=&#34;AWS Route53 Base console AAAA records&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this example we make &lt;code&gt;telemetrics.redisql.redbeardlab.com&lt;/code&gt; point to &lt;code&gt;2001:bc8:4400:2c00::2b:c17&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This does not generate an ambiguity with the &lt;code&gt;A&lt;/code&gt; record above.
If the client asks for the IPv4 address the server returns &lt;code&gt;51.15.142.13&lt;/code&gt;.
While, if the client ask for the IPv6 address the server returns &lt;code&gt;2001:bc8:4400:2c00::2b:c17&lt;/code&gt;.
In this particular case, both addresses point to the same machine.
But they could point to different servers offering completely different services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;CNAME&lt;/code&gt; record creates an alias.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/aws_console_CNAME_record.png&#34; alt=&#34;AWS Route53 Base console CNAME records&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the first example, we set the host &lt;code&gt;redisql.redbeardlab.com&lt;/code&gt; to point to &lt;code&gt;redbeardlab.github.io&lt;/code&gt;.
In this way we can serve, under the domain we control, content from Github pages, for free. Quite convenient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the second case we redirect all the calls to AWS Cloudfront, a CDN managed by AWS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When a client finds a &lt;code&gt;CNAME&lt;/code&gt; it stops asking for the original host IP address and starts asking for the IP address of the ALIAS.
If a client goes to &lt;code&gt;redisql.redbeardlab.com&lt;/code&gt;, at first it will try to find the IP address of &lt;code&gt;redisql.redbeardlab.com&lt;/code&gt;, however, the DNS server will say that the IP address does not exist, but it exists an alias, &lt;code&gt;redbeardlab.github.io&lt;/code&gt;. At this point, the client will start looking for the IP address of &lt;code&gt;redbeardlab.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;TXT&lt;/code&gt; fields were used for verifying the ownership of the domain against Google.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/aws_console_TXT_record.png&#34; alt=&#34;AWS Route53 Base console TXT records&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is the most common use I encounter, but other uses for the &lt;code&gt;TXT&lt;/code&gt; field are possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally, the &lt;code&gt;NS&lt;/code&gt; record, declare who manage the DNS entry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/aws_console_NS_record.png&#34; alt=&#34;AWS Route53 Base console NS records&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this case, the DNS is managed by&amp;#8230;&amp;#8203; Cloudflare.
So all we said above is ignored by a real DNS client that will make its queries not against AWS Route53 but against Cloudflare.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While the TTL (Time To Live) for most records is set to 300 or 600 seconds (5 to 10 minutes) the TTL for the &lt;code&gt;NS&lt;/code&gt; is set to a much larger value, 7200 seconds (2 hours).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is to be expected, you don&amp;#8217;t change often the &lt;code&gt;NS&lt;/code&gt; value, once you set your DNS provider you tend to stick to it. Moreover, change the &lt;code&gt;NS&lt;/code&gt; value is expensive, all the queries need to be directed to a completely different service that needs time to accommodate it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_note_on_name_server_configuration_in_aws_route53&#34;&gt;Note on Name Server configuration in AWS Route53&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unfortunately, in Route53, it is not sufficient to set the &lt;code&gt;Name Server&lt;/code&gt; record set, but it is also necessary to set the name servers in another setting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Under &lt;code&gt;&#39;Register Domains&#39; &amp;gt; $your_domain&lt;/code&gt; and then &#34;Add or edit name servers&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I find a good practice to keep the two values in sync.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_cloudflare&#34;&gt;Cloudflare&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another very reputable DNS provider is Cloudflare. They don&amp;#8217;t sell you domain names directly, but they can manage them for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So you will need to buy your domain somewhere else, also an AWS Route53, and then let Cloudflare manage it. This is what I did above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is done setting up the authoritative name server to point to Cloudflare.
It is as simple as adding a new record (of type &lt;code&gt;NS&lt;/code&gt;) to your existing DNS records (modulo the extra setting in AWS Route53).
From that moment on, beside propagation delay, all the DNS queries will be redirected toward the new authoritative name server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_the_console_2&#34;&gt;The console&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The console of Cloudflare is different from the one of Route53, but overall they contain the same information and it is equally simple to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/DNS/cloudflare_console.png&#34; alt=&#34;Cloudflare DNS console&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can recognize the same kind of information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;A&lt;/code&gt; fields that point to IPv4 addresses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;AAAA&lt;/code&gt; fields that point to IPv6 addresses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;CNAME&lt;/code&gt; used for alias&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;TXT&lt;/code&gt; again used for domain ownership verification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;MX&lt;/code&gt; used for email routing, with a priority&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &#34;Proxy Status&#34; column in the Cloudflare console indicates whenever Cloudflare takes care only of the DNS (&lt;code&gt;DNS only&lt;/code&gt;) or also to cache and manage with their services the request to the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_recap&#34;&gt;Recap&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hopefully, this article is helpful if you are setting up your DNS or if you are getting started with web services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you have any question I would love to expand the article and help you out, feel free to reach over on &lt;a href=&#34;https://twitter.com/pauldigian&#34;&gt;twitter @pauldigian&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Always check your resources before to free them</title>
      <link>https://jr2sr.netlify.com/posts/check_your_resources/</link>
      <pubDate>Wed, 29 Apr 2020 22:05:02 +0200</pubDate>
      
      <guid>https://jr2sr.netlify.com/posts/check_your_resources/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Today I fixed a minor bug in our production code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The software is written in Go(lang) and makes extensive use of the &lt;code&gt;defer&lt;/code&gt; statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; statement, take a function invocation and run it after the current function returns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;They are very handy for clean-up tasks. A classical example is the acquisition of a lock. Or closing a file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Without &lt;code&gt;defer&lt;/code&gt; you would get your resource at the beginning of the function, use it, and then clean-up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the case of locks, you would acquire the lock, do the work in the critical section, release the lock, and the return.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In case of files, you would open the file, write and read to the file, and then close the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With this approach, every return path must be checked. As soon as you add a new return path, you must make sure that it closes all the resources it may have acquired. This is simpler to say than to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Code bases grow larger and larger and it gets messy to check all the possible returns path. And it also looks ugly and not DRY.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; solve this problem. As soon as you get the resource you defer its cleanup. As soon as you acquire the lock, you defer the release of it. As soon as you open a file, you defer closing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You want to put the &lt;code&gt;defer&lt;/code&gt; as close as possible to the resource initialization for two reasons.
First of all, it is clearer when reading the code.
Second, the closer the two calls are, the less it is likely that some hidden return path sneaks into the acquisition and the cleanup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But you don&amp;#8217;t want to put it too close. Before invoking the &lt;code&gt;defer&lt;/code&gt; you must make sure that the resource is valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Today bug was about an HTTP call. I was making the HTTP call and immediately after I was closing its body to avoid leaking resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;client := &amp;amp;http.Client{}
resp, err := client.Do(req)
defer resp.Body.Close()
if resp.StatusCode &amp;gt;= 400 {
	err = fmt.Errorf(&#34;Some error happened %s&#34;, resp.Status)
	return
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unfortunately, sometimes, the network fails. And today it failed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The network failed, the &lt;code&gt;StatusCode&lt;/code&gt; was greater than 400 and the functions returned early. As soon as the function returned, it invoked the &lt;code&gt;defer&lt;/code&gt; statement: &lt;code&gt;resp.Body.Close()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since the requested had failed, the &lt;code&gt;Body&lt;/code&gt; was not there and there was a &lt;code&gt;nil&lt;/code&gt; pointer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; ended up calling the &lt;code&gt;Close()&lt;/code&gt; method of &lt;code&gt;nil&lt;/code&gt; and this caused a runtime panic, blowing it up in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I corrected the code with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;client := &amp;amp;http.Client{}
resp, err := client.Do(req)
if err != nil {
        err = fmt.Errorf(&#34;The HTTP request failed %s&#34;, err)
        return
}
defer resp.Body.Close()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First, I check that the request succeed. If the request succeed, the &lt;code&gt;Body&lt;/code&gt; is something we can &lt;code&gt;Close()&lt;/code&gt;, and so we can &lt;code&gt;defer&lt;/code&gt; its closing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If the request failed, for whatever reason, we return early, without deferring the close of the Body, that does not exist.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Database Fundamental</title>
      <link>https://jr2sr.netlify.com/posts/database_fundamental/</link>
      <pubDate>Mon, 27 Apr 2020 20:40:24 +0200</pubDate>
      
      <guid>https://jr2sr.netlify.com/posts/database_fundamental/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Databases are fundamental in all web application, website, API, CRUD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Lately, new software around databases starts to blossom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An example is GraphQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It provides a more handy, mobile-friendly, interface to access data. Often on top of classical databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;New tools don&amp;#8217;t allow us to skip the underneath fundamental knowledge. But they force us to understand how things work under the hood much deeper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now, it is even more important to understand why some queries are slow and why some are fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A new tool on top of established technology it means that we need to master the underline technology much better. Abstractions are leaky. And to use efficiently the new tools we need to know how they work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fortunately, the basic concepts of database systems are simple. But powerful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_why_databases&#34;&gt;Why databases&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First, we need to understand why we need databases. Why we don&amp;#8217;t store all the data in memory?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unfortunately, software is unreliable. Computers can lose power. Software can crash because of bugs or because of bad input from the user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;How often did you lose all your progress in an import World document?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Moreover, memory is expensive. Disks are much cheaper than RAM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And disks don&amp;#8217;t need electric power to keep the data stored safely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Databases help us in keeping data store safely and they are fast to search for information and records of interest. Even with a huge amount of data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Databases make it feels like we have an infinite amount of fast memory that does not care if our software crash or if the computer lose power.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course, it is more complex than this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_files_and_data_structures&#34;&gt;Files and Data structures&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Databases store information on disks. But disks are different from RAM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In RAM it is fast to read a new piece of data from a random location or address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In disk, this is not true. It is very slow to read data from the beginning of a file and immediately after from the end of the same file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Databases optimize for this constraint. They place data in such a way that it is fast to check if a record is the one we care about.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Databases store data in a tree data structure, usually a B+-tree. Which make fast to access data by a key, the primary key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sometimes we need to manipulate data not based on the primary key, but based on some other property. In such cases, there are two main solutions.
Or we access the whole dataset and filter out all the data we don&amp;#8217;t need or we use indexes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Indexes are data-structure stored on disk. They help us to retrieve information quickly without scanning the whole dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are different kinds of indexes. The most common are based on B+-trees, others are based on hash tables. Each type of index helps in different types of queries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_recap&#34;&gt;Recap&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Databases give us the illusion to have a huge amount to fast, reliable storage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They store information on disk, so they must adopt smart data-structures to make access to data fast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indexes help us retrieve information fast.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What is a Web Request</title>
      <link>https://jr2sr.netlify.com/posts/whats-a-web-request/</link>
      <pubDate>Fri, 10 Apr 2020 12:53:57 +0200</pubDate>
      
      <guid>https://jr2sr.netlify.com/posts/whats-a-web-request/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://jr2sr.netlify.com/whats-a-web-request.jpg&#34; alt=&#34;Networks Cables - Photo by Jordan Harrison on Unsplash&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The web and internet as a large are fundamental for today&amp;#8217;s world, but how does it work under the hood?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this article, we will talk about HTTP requests that are the fundamentals blocks that make the modern web possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will explore how tools like &lt;a href=&#34;https://requests.readthedocs.io/en/master/&#34;&gt;Python &lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://ruby-doc.org/stdlib-2.7.0/libdoc/net/http/rdoc/Net/HTTP.html&#34;&gt;Ruby &lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; or again the &lt;a href=&#34;https://golang.org/pkg/net/http/&#34;&gt;Go package &lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; or any other library that you may use in any other language works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_aha_moment&#34;&gt;The Aha moment&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Reasoning about the topic becomes extremely simple as soon as we figure out what is an HTTP request, and the reality is extremely simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An HTTP request is nothing more than a stream of bytes, almost always ASCII bytes that it is possible to read and interpret. To put it even more simply, it is just a string formatted following some rule.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The one below is already a complete HTTP request and this is the most important concept. An HTTP request is nothing more than strings of text similar to this one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;GET / HTTP/2
Host: www.google.com
User-Agent: curl/7.58.0
Accept: */*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An HTTP response is not that different:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;HTTP/2 200
date: Fri, 10 Apr 2020 11:25:36 GMT
expires: -1
cache-control: private, max-age=0
content-type: text/html; charset=ISO-8859-1
p3p: CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;
server: gws
x-xss-protection: 0
x-frame-options: SAMEORIGIN
set-cookie: 1P_JAR=2020-04-10-11; expires=Sun, 10-May-2020 11:25:36 GMT; path=/; domain=.google.com; Secure
set-cookie: NID=202=lXbpl7jzwsRDvcSyw84CtGB7NO3J2HziT0SjF24N4joVsoUzXNRdc03yTeckZu2zQXc8TJty73IYg9ktX3yrtSb59lC1-jxyTprH_wGly4D2RiFC4Ww1T2Om69YYjxDtkgEDmQbqoYYyzahBQowvSM-q5JpF6hoC-gzLRTnnn38; expires=Sat, 10-Oct-2020 11:25:36 GMT; path=/; domain=.google.com; HttpOnly
alt-svc: quic=&#34;:443&#34;; ma=2592000; v=&#34;46,43&#34;,h3-Q050=&#34;:443&#34;; ma=2592000,h3-Q049=&#34;:443&#34;; ma=2592000,h3-Q048=&#34;:443&#34;; ma=2592000,h3-Q046=&#34;:443&#34;; ma=2592000,h3-Q043=&#34;:443&#34;; ma=2592000,h3-T050=&#34;:443&#34;; ma=2592000
accept-ranges: none
vary: Accept-Encoding

&amp;lt;!doctype html&amp;gt;&amp;lt;html&amp;gt; ...THE_HTML_OF_THE_GOOGLE_HOMEPAGE... &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All those libraries and frameworks are just a way to create, interpret and send over the network strings that look like this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_http_rules_and_protocol&#34;&gt;The HTTP rules and protocol&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The rules to create a correct HTTP request are encoded in an &lt;a href=&#34;https://tools.ietf.org/html/rfc7230&#34;&gt;RFC 7230&lt;/a&gt; it can be interesting to explore the document and understand at least some of the details, but for most developer will be an overkill.
However, if your work orbit a lot around the web infrastructure it can be necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For instance, &lt;a href=&#34;https://tools.ietf.org/html/rfc7230#section-3&#34;&gt;Section 3 of RFC 7230&lt;/a&gt; describe formally what is an &lt;code&gt;HTTP message&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;HTTP-message = start-line
               *( header-field CRLF )
               CRLF
               [ message-body ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This definition means that an &lt;code&gt;HTTP-message&lt;/code&gt; is nothing else than a &lt;code&gt;start-line&lt;/code&gt;, followed by 0 or more &lt;code&gt;header-field&lt;/code&gt; each followed by a CRLF (a new line &lt;code&gt;\r\n&lt;/code&gt;), another new line and an optional &lt;code&gt;message-body&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Keep reading the RFC we will discover what is &lt;a href=&#34;https://tools.ietf.org/html/rfc7230#section-3.1.1&#34;&gt;&lt;code&gt;start-line&lt;/code&gt; on section 3.1&lt;/a&gt; and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It turns out that the &lt;code&gt;start-line&lt;/code&gt; of a request specify the method of the request, either &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;CONNECT&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt; or &lt;code&gt;TRACE&lt;/code&gt; all documented in &lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-4&#34;&gt;RFC 7231 Section 4&lt;/a&gt;.
Most developers just need to be aware of all the possible methods, but they won&amp;#8217;t use all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Then it specifies what is the target of the request, in our case the root directory &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And finally, it specifies what protocol to use in the communication, in this case, we use &lt;code&gt;HTTP/2&lt;/code&gt;, another common one is &lt;code&gt;HTTP/1.1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_keeping_state_authentication_and_cookie&#34;&gt;Keeping state, authentication, and cookie&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The HTTP protocol is mostly stateless, there is nothing that forbids a client to request somebody private records on a social network protocol after all an HTTP request is just a string formatted following some rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, the server needs to forbid those requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To overcome the limitation imposed by being a stateless protocol, HTTP relies on the concept of Cookies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An HTTP response, generated by an HTTP server, can include the &lt;code&gt;Set-Cookie&lt;/code&gt; header (the name is case insensitive, the request above to google.com returned &lt;code&gt;set-cookie&lt;/code&gt;).
The &lt;code&gt;Set-Cookie&lt;/code&gt; header instructs the &lt;code&gt;user-agent&lt;/code&gt; (the client, with some level of approximation) to store the value of the cookie and to send it to the server to any subsequent request using the &lt;code&gt;Cookie&lt;/code&gt; header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another &lt;a href=&#34;https://tools.ietf.org/html/rfc6265&#34;&gt;RFC (6265)&lt;/a&gt; covers this topic extensively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For most developer is sufficient to know that the &lt;code&gt;Set-Cookie&lt;/code&gt; header provides some options to tweak how the client manages the cookie.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For instance, the &lt;code&gt;Path&lt;/code&gt; attribute indicates that the cookie should be sent only for requests against a specific URL path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;Secure&lt;/code&gt; indicates that the cookie should not be sent on insecure connections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally the &lt;code&gt;HttpOnly&lt;/code&gt; indicate that the cookie should not be accessible outside the HTTP protocol, for instance, it should not be read using the JS API on the browser.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_closing_thoughts&#34;&gt;Closing thoughts&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While the protocol itself is rather simple, after all, it is just about concatenating strings and keep tracks of cookies, the necessities of modern software forced us to build complex systems to extract as much performance as possible while keeping an ergonomic interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Most likely developers would like to make more requests in parallel while maybe sharing some cookies but not all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All these real-world necessities and use case makes the software explode in complexity, but also in usefulness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However &lt;code&gt;HTTP&lt;/code&gt; remains a simple protocol and the CPython codebase &lt;a href=&#34;https://github.com/python/cpython/blob/3.8/Lib/http/client.py#L1096-L1098&#34;&gt;offers a glimpse of this simplicity.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;request = &#39;%s %s %s&#39; % (method, url, self._http_vsn_str)
self._output(self._encode_request(request))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is creating the &lt;code&gt;start-line&lt;/code&gt; of an HTTP message, just like we did at the very beginning of this post with &lt;code&gt;GET / HTTP/2&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a function to create HTTP requests.
As input, you can expect the methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc&amp;#8230;&amp;#8203;), the host and the URL of the resource.
You can expand the little function to support also headers?
And how would you manage cookies?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In the next section, we will discover DNS, sockets, and TCP. So it will be possible to actually send a request and read back the response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_bonus_trivial&#34;&gt;Bonus Trivial&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;From the standard of &lt;code&gt;HTTP1.1&lt;/code&gt;, the headers are strictly optional, indeed they are defined like this &lt;code&gt;*( header-field CRLF)&lt;/code&gt; where the star (&lt;code&gt;*&lt;/code&gt;) means &lt;strong&gt;zero&lt;/strong&gt; or more repetition.
However, the same standard dictates that the &lt;code&gt;Host&lt;/code&gt; header &lt;a href=&#34;https://tools.ietf.org/html/rfc7230#section-5.4&#34;&gt;&lt;strong&gt;must&lt;/strong&gt; be present&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This clear inconsistency was introduced to keep backward compatibility so that every &lt;code&gt;HTTP1.1&lt;/code&gt; request is also an &lt;code&gt;HTTP1.0&lt;/code&gt; request.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is a clear example of how the world evolves from mistakes and error and also something as widespread and used as &#34;the internet&#34; was designed with some initial mistakes. After all, we are human and the success of the &lt;code&gt;HTTP&lt;/code&gt; was not sure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Junior 2 Senior</title>
      <link>https://jr2sr.netlify.com/posts/start_here/</link>
      <pubDate>Sat, 04 Apr 2020 23:19:06 +0200</pubDate>
      
      <guid>https://jr2sr.netlify.com/posts/start_here/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Junior 2 Senior is a technical course where I unload all my knowledge for younger computer engineers that want to speed up their career path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The goal is to provide all the necessary notions and mental models to work around problems for people to be hired in high-tech companies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The course is based only on fundamental concepts. We will focus only on those concepts that were important 20 years ago, are important now, and will be important for at least the next 20 years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will cover very broad topics without going too deep into any, there are already a lot of resources, references and articles to dive deep into all the topics we will cover. The purpose of this publication is to uncover organically all the small things that senior computer engineers should know. It is left to the reader to decide which topic explores further and when.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some people will need to understand better the internals of compilers, while for others it would be more beneficial to study how the sorting inside a database works. In this course, we will explore both.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will suggest some exercises to help you learn by doing. Making sure that you understand the main ideas down to the important details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_it_is_about&#34;&gt;What it is about&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The course is about getting you up to speed with all those topics that are fundamental for computer engineers but to which younger engineers might have not been exposed yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is about making sure you have all the notion to go above expectations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is about overcoming imposter syndrome having studied and understood those fundamental topics on which everything else is based.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All the topics covered are much deeper than what could be cover, but it will be up to the reader to keep digging for what it is more interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_a_different_course&#34;&gt;A different course&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Technical books are usually about a specific topic, say &#34;Graphical programming with GPU&#34;.
Those kinds of books and courses go extremely deeply about the specific topic, teaching all the important and not so important bits.
Those resources are fundamental if you are specializing in a particular field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This course is different, it is about exposing you to the fundamental concepts that any senior engineer should know.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_structure&#34;&gt;Structure&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The course is composed of two-part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;A book&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A community&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The book is digital and you will have access to all the versions and the errata. &lt;a href=&#34;https://gumroad.com/l/junior2senior&#34;&gt;It is in presale here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The community is about sharing solution with the exercises, clarify part of the books that are not clear, ask further questions, suggest new topics, and helping each other.
It will also be possible to ask support during technical interview preparation.
The community is still not open.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_outline&#34;&gt;Outline&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The outline of the book is in progress, new topics will be added and stuff will be moved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But this is a rough idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;The web basics: &lt;strong&gt;Learn the fundamental blocks of the modern web&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jr2sr.netlify.com/posts/whats-a-web-request&#34;&gt;What is a web request&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jr2sr.netlify.com/posts/dns&#34;&gt;DNS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sockets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Media Streaming&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding low-level memory: &lt;strong&gt;How memory works and what are the implication&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;Memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pointers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Structures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On-disk data structure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disk Storage vs Memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caches&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How code runs: &lt;strong&gt;How do we go from source code to make computers do stuff&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;Compilation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interpretation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stack vs Heap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory layout&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shared libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building Software&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple cores: &lt;strong&gt;CPU are not getting any faster, but we are getting more of them, how to use them&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;Threads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomic variables&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux: &lt;strong&gt;Working with the basic Linux API&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;glibc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filesystems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software Installation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>